# config/model.yaml

data:
  bin_dir: datasets
  bin_file: mel_spectrograms.h5
  mel_key: mel_spectrogram # Key for target mel spectrograms (Updated based on preprocess.py)
  phoneme_key: phone_sequence # Key for input phoneme sequences (Updated based on preprocess.py)
  duration_key: adjusted_durations # Key for input duration sequences (Updated based on preprocess.py)
  f0_key: f0_contour        # Key for input F0 sequences (Updated based on preprocess.py)
  midi_pitch_key: midi_pitch_estimated # Key for estimated MIDI pitch
  lazy_load: true
  raw_dir: datasets/gin
  # max_samples: 100 # Set to null or remove to use full dataset
  sample_percentage: null
  variable_length: true
  min_phones_in_lab: 5 # Minimum number of phone entries required in a .lab file to process it

audio:
  sample_rate: 22050
  n_fft: 1024
  hop_length: 256
  win_length: 1024
  n_mels: 80
  fmin: 0
  fmax: 8000
  f0_min: 50
  f0_max: 600
  max_audio_length: 10.0

# Model specific parameters
model:
  name: ProgressiveSVS # New model name
  mel_bins: 80        # Shared: Output dimension (should match audio.n_mels)
  vocab_size: null    # Shared: Will be dynamically set from data

  # --- ProgressiveSVS Specific Parameters ---
  # Embedding dimensions (Adjust as needed)
  f0_embed_dim: 64
  phone_embed_dim: 256
  midi_embed_dim: 64

  # Resolution scaling factors (relative to full mel_bins)
  # Example: low_res_scale=4 means low-res has mel_bins/4 frequency bins
  low_res_scale: 4
  mid_res_scale: 2

  # Channel configurations for each stage (Adjust based on complexity/memory)
  # Format: List of output channels for each ConvBlock in the stage
  low_res_channels: [256, 256, 128]
  mid_res_channels: [128, 128, 64]
  high_res_channels: [64, 64, 32]

  # Initial training stage (1, 2, or 3)
  current_stage: 1

# Training Configuration
train:
  batch_size: 16        # Adjust based on GPU memory
  epochs_per_stage:
    stage1: 30
    stage2: 100
    stage3: 150
  val_interval: 1       # Run validation every N epochs
  log_dir: logs         # Base directory for all logs
  tensorboard_log_dir: tensorboard # Subdirectory for TensorBoard logs
  checkpoint_dir: checkpoints # Subdirectory for model checkpoints
  num_workers: 4        # DataLoader workers
  log_spectrogram_every_n_val_steps: 5 # Log spectrogram comparison every N validation steps

  # --- Stage-Specific Learning Rates ---
  learning_rate_per_stage:
    stage1: 0.0005  # Example LR for stage 1 (Adjusted from 0.001)
    stage2: 0.0005  # Example LR for stage 2
    stage3: 0.0002  # Example LR for stage 3
  # --- End Stage-Specific Learning Rates ---

  # --- Global Optimizer/Scheduler Params ---
  weight_decay: 0.0001    # Adam weight decay
  lr_factor: 0.5          # Factor by which the learning rate will be reduced (scheduler)
  lr_patience: 10         # Number of epochs with no improvement after which learning rate will be reduced (scheduler)
  # gradient_clip_val: 1.0 # Optional: Gradient clipping value
  freeze_loaded_weights: true # Default: Freeze weights when loading from ckpt

  # log_interval defines log_every_n_steps in Trainer
  log_interval: 50        # Log training metrics every N steps

  # Removed: GAN specific params (lr_g, lr_d, betas, lambda_recon)